{"version":3,"sources":["compnents/Card.js","compnents/CardList.js","compnents/Scroll.js","compnents/SearchBox.js","compnents/CounterButton.js","compnents/Header.js","App.js","store/actions/robots.actions.js","store/constats.js","serviceWorker.js","store/reducers/robots.reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchFiled","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","dispach","fetch","then","response","json","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.17d64ff5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    // const {id, name, email} = props;\n    return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n          <img src={`https://robohash.org/${id}p?size=200x200`} alt='robot'/>\n          <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n          </div>\n      </div>\n    );\n  \n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    // const cardComponent = robots.map((user, i) => {\n    //     return  <Card key= {i} id={robots[i].id} name = {robots[i].name} email={robots[i].email}/>\n    // })\n    // return (\n    //     <div>\n    //         {cardComponent}\n    //     </div>\n    // )\n \n    return (\n        <div>\n            {\n            robots.map((user, i) => {\n            return (\n                <Card \n                    key= {i} \n                    id={robots[i].id} \n                    name = {robots[i].name} \n                    email={robots[i].email}\n                />\n            )\n            })\n            }\n        </div>\n    )\n\n}\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                aria-label= 'Search robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n    \n  shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.count !== nextState.count) {\n        return true;\n      }\n    return false;\n  }\n  updateCount = () => {\n      this.setState(state => {\n          return {count: state.count + 1}})\n  }\n  render() {\n    return (\n        <button color={this.props.color} onClick={this.updateCount}>\n            count: {this.state.count}\n        </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n\n  }\n  render() {\n    return (<div>\n             \n              <h1 className='f1'>RoboFriends</h1>\n              <CounterButton color={\"red\"}/>\n          </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport CardList from './compnents/CardList';\n// import { robots } from './robots'\nimport Scroll from './compnents/Scroll'\nimport SearchBox from './compnents/SearchBox'\nimport Header from './compnents/Header'\nimport './App.css';\n\nimport { setSearchField, requestRobots } from './store/actions/robots.actions'\n// or import * as Actions from './store/actions/robots.actions'\n\nconst mapStateToProps = state => {\n  return {\n    searchFiled: state.searchRobots.searchFiled,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n  \ncomponentDidMount(){\n this.props.onRequestRobots();\n}\n\n  render() {\n    // searchfield we do not reed this becaouse app recived it as props\n    const { searchFiled, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchFiled.toLowerCase())\n    })\n    return isPending ? \n      <h2>Looding... </h2> :\n       (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={ filterRobots }/>\n          </Scroll>\n        </div>    \n        );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as Type from '../constats'\n\nexport const setSearchField = (text) => ({\n    type: Type.CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispach) =>{\n    dispach({\n        type: Type.REQUEST_ROBOTS_PENDING\n    });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(robots => dispach({\n        type: Type.REQUEST_ROBOTS_SUCCESS,\n        payload: robots\n    }))\n    .catch(error => dispach({\n        type: Type.REQUEST_ROBOTS_FAILED,\n        payload: error\n    }))\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as Types from '../constats'\n\nconst initialStateSearch = {\n    searchFiled: ''\n}\n\nexport const searchRobots = \n        (state=initialStateSearch, action={}) =>  {\n    switch(action.type) {\n        case Types.CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchFiled: action.payload})\n        default:\n            return state;\n    }   \n\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots   : [],\n    error    : ''     \n}\n\nexport const requestRobots = \n        ( state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case Types.REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case Types.REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\n        case Types.REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending:false})\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware , combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './store/reducers/robots.reducers'\nimport 'tachyons';\n\n\nconst logger = createLogger();\n//here it should be rootreducer but unitl now we have one reducer\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                <Provider store={store} >\n                <App /> \n                </Provider>,\n                document.getElementById('root'));\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}